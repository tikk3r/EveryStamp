window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "everystamp", "modulename": "everystamp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "everystamp.cutters", "modulename": "everystamp.cutters", "kind": "module", "doc": "<p>Sub-module for trimming FITS images.</p>\n"}, {"fullname": "everystamp.cutters.make_cutout_2D", "modulename": "everystamp.cutters", "qualname": "make_cutout_2D", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image</span>, </span><span class=\"param\"><span class=\"n\">pos</span>, </span><span class=\"param\"><span class=\"n\">size</span>, </span><span class=\"param\"><span class=\"n\">outfile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders", "modulename": "everystamp.downloaders", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "everystamp.downloaders.logger", "modulename": "everystamp.downloaders", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger EveryStamp:Downloader (INFO)&gt;"}, {"fullname": "everystamp.downloaders.flatten", "modulename": "everystamp.downloaders", "qualname": "flatten", "kind": "function", "doc": "<p>Flatten a nested list, as per the example on <a href=\"https://stackoverflow.com/a/40857703\">https://stackoverflow.com/a/40857703</a>.</p>\n\n<p>Args:\n    xs : list\n        Nested list to flatten.</p>\n\n<p>Returns:\n    x : list\n        Flattened list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.FileDownloader", "modulename": "everystamp.downloaders", "qualname": "FileDownloader", "kind": "class", "doc": "<p>From <a href=\"https://medium.com/better-programming/python-progress-bars-with-tqdm-by-example-ce98dbbc9697\">https://medium.com/better-programming/python-progress-bars-with-tqdm-by-example-ce98dbbc9697</a>\nCopyright 2019 tiptapcode Authors. All Rights Reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n     <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">http://www.apache.org/licenses/LICENSE-2.0</a>\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n"}, {"fullname": "everystamp.downloaders.FileDownloader.get_url_filename", "modulename": "everystamp.downloaders", "qualname": "FileDownloader.get_url_filename", "kind": "function", "doc": "<p>Discover file name from HTTP URL, If none is discovered derive name from http redirect HTTP content header Location</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  Url link to file to download</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Base filename</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.FileDownloader.download_file", "modulename": "everystamp.downloaders", "qualname": "FileDownloader.download_file", "kind": "function", "doc": "<p>Stream downloads files via HTTP</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  Url link to file to download</li>\n<li><strong>filename</strong>:  filename overrides filename defined in Url param</li>\n<li><strong>target_dir</strong>:  target destination directory to download file to</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Absolute path to target destination where file has been downloaded to</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">target_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.LegacyDownloader", "modulename": "everystamp.downloaders", "qualname": "LegacyDownloader", "kind": "class", "doc": "<p>Downloader sub-class for the DESI Legacy Imaging Surveys.</p>\n", "bases": "FileDownloader"}, {"fullname": "everystamp.downloaders.LegacyDownloader.supported_keywords", "modulename": "everystamp.downloaders", "qualname": "LegacyDownloader.supported_keywords", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;ra&#x27;, &#x27;dec&#x27;, &#x27;mode&#x27;, &#x27;layer&#x27;, &#x27;pixscale&#x27;, &#x27;bands&#x27;, &#x27;size_pix&#x27;]"}, {"fullname": "everystamp.downloaders.LegacyDownloader.logger", "modulename": "everystamp.downloaders", "qualname": "LegacyDownloader.logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger EveryStamp:LegacyDownloader (INFO)&gt;"}, {"fullname": "everystamp.downloaders.LegacyDownloader.url", "modulename": "everystamp.downloaders", "qualname": "LegacyDownloader.url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.downloaders.LegacyDownloader.format_url", "modulename": "everystamp.downloaders", "qualname": "LegacyDownloader.format_url", "kind": "function", "doc": "<p>Returns a properly formatted URL that can be used to obtain a cutout from Legacy.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ra</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dec</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bands</span><span class=\"o\">=</span><span class=\"s1\">&#39;grz&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;jpeg&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">layer</span><span class=\"o\">=</span><span class=\"s1\">&#39;ls-dr9&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pixscale</span><span class=\"o\">=</span><span class=\"mf\">0.262</span>,</span><span class=\"param\">\t<span class=\"n\">autoscale</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.LegacyDownloader.download", "modulename": "everystamp.downloaders", "qualname": "LegacyDownloader.download", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.PanSTARRSDownloader", "modulename": "everystamp.downloaders", "qualname": "PanSTARRSDownloader", "kind": "class", "doc": "<p>Downloader sub-class for the VLASS survey.</p>\n"}, {"fullname": "everystamp.downloaders.PanSTARRSDownloader.logger", "modulename": "everystamp.downloaders", "qualname": "PanSTARRSDownloader.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.downloaders.PanSTARRSDownloader.download", "modulename": "everystamp.downloaders", "qualname": "PanSTARRSDownloader.download", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ra</span>, </span><span class=\"param\"><span class=\"n\">dec</span>, </span><span class=\"param\"><span class=\"n\">size</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;jpeg&#39;</span>, </span><span class=\"param\"><span class=\"n\">ddir</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">bands</span><span class=\"o\">=</span><span class=\"s1\">&#39;gri&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.PanSTARRSDownloader.psdownloader", "modulename": "everystamp.downloaders", "qualname": "PanSTARRSDownloader.psdownloader", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;panstamps.downloader.downloader&#x27;&gt;"}, {"fullname": "everystamp.downloaders.VLASSDownloader", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader", "kind": "class", "doc": "<p>Downloader sub-class for the VLASS survey.</p>\n\n<p>Based on the original code by Anna Ho (<a href=\"https://github.com/annayqho/Query_VLASS\">https://github.com/annayqho/Query_VLASS</a>) and edits by R. Timmerman.</p>\n", "bases": "FileDownloader"}, {"fullname": "everystamp.downloaders.VLASSDownloader.__init__", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datatype</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ql&#39;</span></span>)</span>"}, {"fullname": "everystamp.downloaders.VLASSDownloader.summary_url", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader.summary_url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.downloaders.VLASSDownloader.logger", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.downloaders.VLASSDownloader.datatype", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader.datatype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.downloaders.VLASSDownloader.get_tiles", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader.get_tiles", "kind": "function", "doc": "<p>Read tiles from tile catalog. If file missing, try wget <a href=\"https://archive-new.nrao.edu/vlass/VLASS_dyn_summary.php\">https://archive-new.nrao.edu/vlass/VLASS_dyn_summary.php</a></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>summary_file : str\n    Location where the VLASS summary file is located.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tab : astropy Table\n    Table containing tile information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">summary_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;VLASS_dyn_summary.php&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.VLASSDownloader.search_tiles", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader.search_tiles", "kind": "function", "doc": "<p>Search the tile catalog for tiles containing the input coordinate</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>tiles : astropy Table\n    Tile catalogue as obtained from get_tiles()\nc : SkyCoord\n    Location to check for coverage in one of the observed tiles.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tile name : str\n    Best matching tile.\nobserving epoch : str\n    Epoch the best matching tile was observed in.\nobserving date : str\n    Date the best matching tile was observed at.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tiles</span>, </span><span class=\"param\"><span class=\"n\">c</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.VLASSDownloader.get_subtiles", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader.get_subtiles", "kind": "function", "doc": "<p>For a given tile name, get the subtile filenames in the VLASS directory</p>\n\n<p>Parse those filenames and return a list of subtile RA and Dec.\nRA and Dec returned as a SkyCoord object</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>tilename : str\n    Name of the tile to extract a subtile from.\nepoch : str\n    The epoch the tile was observed in.\nconsider_QA_rejected : bool\n    Also consider tiles that did not pass the quality assurance checks.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>fname : str\n    Name of the subtile.\nc : astropy SkyCoord\n    Coordinate of the subtile.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tilename</span>, </span><span class=\"param\"><span class=\"n\">epoch</span>, </span><span class=\"param\"><span class=\"n\">consider_QA_rejected</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.VLASSDownloader.get_cutout", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader.get_cutout", "kind": "function", "doc": "<p>Get a smaller cutout from the subtile.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>imname : str\n    Name of the image to make a cutout from.\nc : astropy SkyCoord\n    Coordinate around which to make a cutout.\ncrop_scale : int\n    Size of the cutout in pixels.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>output_fits : str\n    Name of the output FITS file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">imname</span>, </span><span class=\"param\"><span class=\"n\">c</span>, </span><span class=\"param\"><span class=\"n\">crop_scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.VLASSDownloader.search_vlass", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader.search_vlass", "kind": "function", "doc": "<p>Searches the VLASS catalog for a source</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>c : astropy SkyCoord\n    Coordinate to search for in tiles.\ncrop : bool\n    Make a cropped cutout of the area of interest.\ncrop_scale : int\n    Crop the cutout to this amount of pixels centred around c.\nconsider_QA_rejected : bool\n    Also consider tiles that failed the Quality Assurance checks.\nddir : str\n    Location to download the cutout to.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>imname : str\n    Name of the output image.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">c</span>,</span><span class=\"param\">\t<span class=\"n\">crop</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">crop_scale</span><span class=\"o\">=</span><span class=\"mi\">256</span>,</span><span class=\"param\">\t<span class=\"n\">consider_QA_rejected</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ddir</span><span class=\"o\">=</span><span class=\"s1\">&#39;/home/sweijen/software/EveryStamp&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.VLASSDownloader.download", "modulename": "everystamp.downloaders", "qualname": "VLASSDownloader.download", "kind": "function", "doc": "<p>Download a cutout from the VLASS survey.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ra : float\n    Right ascension of the coordinate of interest.\ndec : float\n    Declination of the coordinate of interest.\nsize : float\n    Size of the area of interest in degrees.\nms : str\n    Path to a Measurement Set to take coordinates from instead of using ra and dec.\ncrop : bool\n    Crop the image to the area of interest.\nconsider_QA_rejected : bool\n    Also consider tiles that failed the Quality Assurance checks.\nddir : str\n    Location to download the cutout to.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ra</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">dec</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">ms</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">crop</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">consider_QA_rejected</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ddir</span><span class=\"o\">=</span><span class=\"s1\">&#39;/home/sweijen/software/EveryStamp&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.VODownloader", "modulename": "everystamp.downloaders", "qualname": "VODownloader", "kind": "class", "doc": "<p>Downloader sub-class for surveys offeret through a VO.</p>\n"}, {"fullname": "everystamp.downloaders.VODownloader.__init__", "modulename": "everystamp.downloaders", "qualname": "VODownloader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "everystamp.downloaders.VODownloader.download", "modulename": "everystamp.downloaders", "qualname": "VODownloader.download", "kind": "function", "doc": "<p>Download a cutout from the VLASS survey.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ra : float\n    Right ascension of the coordinate of interest in degrees.\ndec : float\n    Declination of the coordinate of interest in degrees    .\nsize : float\n    Size of the area of interest in degrees.\nddir : str\n    Location to download the cutout to.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ra</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">dec</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">ddir</span><span class=\"o\">=</span><span class=\"s1\">&#39;/home/sweijen/software/EveryStamp&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.HiPSDownloader", "modulename": "everystamp.downloaders", "qualname": "HiPSDownloader", "kind": "class", "doc": "<p>Sub-class to download a file from a HiPS image using hips2fits.</p>\n"}, {"fullname": "everystamp.downloaders.HiPSDownloader.__init__", "modulename": "everystamp.downloaders", "qualname": "HiPSDownloader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hips</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "everystamp.downloaders.HiPSDownloader.logger", "modulename": "everystamp.downloaders", "qualname": "HiPSDownloader.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.downloaders.HiPSDownloader.download", "modulename": "everystamp.downloaders", "qualname": "HiPSDownloader.download", "kind": "function", "doc": "<p>Download a cutout from the VLASS survey.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ra : float\n    Right ascension of the coordinate of interest in degrees.\ndec : float\n    Declination of the coordinate of interest in degrees    .\nsize : float\n    Size of the area of interest in degrees.\nddir : str\n    Location to download the cutout to.\npixsize : float\n    Pixel scale of the survey in arcsec. Default is 1.0 arcsec per pixel.\nmode : str\n    What image format to download. Can be jpg or fits, default is jpg.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ra</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">dec</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">ddir</span><span class=\"o\">=</span><span class=\"s1\">&#39;/home/sweijen/software/EveryStamp&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pixsize</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;jpg&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.downloaders.SkyViewDownloader", "modulename": "everystamp.downloaders", "qualname": "SkyViewDownloader", "kind": "class", "doc": "<p>Downloader sub-class for surveys offeret through a VO.</p>\n"}, {"fullname": "everystamp.downloaders.SkyViewDownloader.__init__", "modulename": "everystamp.downloaders", "qualname": "SkyViewDownloader.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">survey</span></span>)</span>"}, {"fullname": "everystamp.downloaders.SkyViewDownloader.download", "modulename": "everystamp.downloaders", "qualname": "SkyViewDownloader.download", "kind": "function", "doc": "<p>Download a cutout from the VLASS survey.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ra : float\n    Right ascension of the coordinate of interest in degrees.\ndec : float\n    Declination of the coordinate of interest in degrees    .\nsize : float\n    Size of the area of interest in degrees.\npixsize\n    Pixel size to use for the cutout.\nddir : str\n    Location to download the cutout to.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ra</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">dec</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">pixsize</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">ddir</span><span class=\"o\">=</span><span class=\"s1\">&#39;/home/sweijen/software/EveryStamp&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.everystamp", "modulename": "everystamp.everystamp", "kind": "module", "doc": "<p>Python library aiming to provide a wrapper around various astronomical surveys that offer cutouts.</p>\n"}, {"fullname": "everystamp.everystamp.logger", "modulename": "everystamp.everystamp", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger EveryStamp (INFO)&gt;"}, {"fullname": "everystamp.everystamp.HAS_LHDR", "modulename": "everystamp.everystamp", "qualname": "HAS_LHDR", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "everystamp.everystamp.flatten", "modulename": "everystamp.everystamp", "qualname": "flatten", "kind": "function", "doc": "<p>Generator to flatten a list of nested lists.</p>\n\n<p>Args:\n    xs : list\n        The list to flatten.</p>\n\n<p>Yields:\n    x : iterable\n        An iterable that will generate the flattened list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.everystamp.main", "modulename": "everystamp.everystamp", "qualname": "main", "kind": "function", "doc": "<p>Main entry point if called as a standalone executable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.plotters", "modulename": "everystamp.plotters", "kind": "module", "doc": "<p>Sub-module for plotting FITS images.</p>\n"}, {"fullname": "everystamp.plotters.BasicFITSPlot", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot", "kind": "class", "doc": "<p>Creates a basic plot of a FITS file.</p>\n"}, {"fullname": "everystamp.plotters.BasicFITSPlot.__init__", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot.__init__", "kind": "function", "doc": "<p>Initialise a basic plotting object for 2D FITS files.</p>\n\n<p>Args:\n    fitsname : str\n        Name of the FITS file that will be plotted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fitsname</span></span>)</span>"}, {"fullname": "everystamp.plotters.BasicFITSPlot.dpi", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot.dpi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicFITSPlot.figsize", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot.figsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicFITSPlot.fitsimage", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot.fitsimage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicFITSPlot.fitsdata", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot.fitsdata", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicFITSPlot.data", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicFITSPlot.wcs", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot.wcs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicFITSPlot.plot2D", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot.plot2D", "kind": "function", "doc": "<p>Save a 2D plot of the loaded FITS file.</p>\n\n<p>Args:\n    plot_colourbar : bool\n        Add a colour bar to the plot.\n    contour_image:\n        Add contours based on this image.\n    contour_levels:\n        Number of contour levels to draw if an integer or contour levels if a list. Defaults to 5.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">plot_colourbar</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">contour_image</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">contour_levels</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>,</span><span class=\"param\">\t<span class=\"n\">cmap_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cmap_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.plotters.BasicFITSPlot.plot_noaxes", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot.plot_noaxes", "kind": "function", "doc": "<p>Save a plot of the FITS image without any axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cmap_min</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">cmap_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.plotters.BasicFITSPlot.savedata", "modulename": "everystamp.plotters", "qualname": "BasicFITSPlot.savedata", "kind": "function", "doc": "<p>Save data of a BasicPlot object to a FITS file with the same WCS information.</p>\n\n<p>Any tonemapping applied to the original data will be carried over to the FITS file. Physical units will thus be lost.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outfile</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.plotters.SRTPlot", "modulename": "everystamp.plotters", "qualname": "SRTPlot", "kind": "class", "doc": "<p>Create a line profile plot similar in style to the SRTPLOT task used by Hogbom 1974.</p>\n"}, {"fullname": "everystamp.plotters.SRTPlot.__init__", "modulename": "everystamp.plotters", "qualname": "SRTPlot.__init__", "kind": "function", "doc": "<p>Initialise a basic plotting object for 2D FITS files.</p>\n\n<p>Args:\n    fitsname : str\n        Name of the FITS file that will be plotted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fitsname</span></span>)</span>"}, {"fullname": "everystamp.plotters.SRTPlot.dpi", "modulename": "everystamp.plotters", "qualname": "SRTPlot.dpi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.SRTPlot.figsize", "modulename": "everystamp.plotters", "qualname": "SRTPlot.figsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.SRTPlot.fitsimage", "modulename": "everystamp.plotters", "qualname": "SRTPlot.fitsimage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.SRTPlot.fitsdata", "modulename": "everystamp.plotters", "qualname": "SRTPlot.fitsdata", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.SRTPlot.data", "modulename": "everystamp.plotters", "qualname": "SRTPlot.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.SRTPlot.plot2D", "modulename": "everystamp.plotters", "qualname": "SRTPlot.plot2D", "kind": "function", "doc": "<p>Save an SRTPLOT style plot of the loaded FITS file.</p>\n\n<p>Args:\n    lines : int\n        Number of lines to plot.\n    offset : float\n        Offset between each line in data units.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">srt_lines</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>, </span><span class=\"param\"><span class=\"n\">srt_offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.plotters.BasicImagePlot", "modulename": "everystamp.plotters", "qualname": "BasicImagePlot", "kind": "class", "doc": "<p>Creates a basic plot of a FITS file.</p>\n"}, {"fullname": "everystamp.plotters.BasicImagePlot.__init__", "modulename": "everystamp.plotters", "qualname": "BasicImagePlot.__init__", "kind": "function", "doc": "<p>Initialise a basic plotting object for 2D FITS files.</p>\n\n<p>Args:\n    fitsname : str\n        Name of the FITS file that will be plotted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">imname</span></span>)</span>"}, {"fullname": "everystamp.plotters.BasicImagePlot.dpi", "modulename": "everystamp.plotters", "qualname": "BasicImagePlot.dpi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicImagePlot.figsize", "modulename": "everystamp.plotters", "qualname": "BasicImagePlot.figsize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicImagePlot.image", "modulename": "everystamp.plotters", "qualname": "BasicImagePlot.image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicImagePlot.imdata", "modulename": "everystamp.plotters", "qualname": "BasicImagePlot.imdata", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicImagePlot.data", "modulename": "everystamp.plotters", "qualname": "BasicImagePlot.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "everystamp.plotters.BasicImagePlot.plot2D", "modulename": "everystamp.plotters", "qualname": "BasicImagePlot.plot2D", "kind": "function", "doc": "<p>Save a plot of the FITS image without any axes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping", "modulename": "everystamp.tonemapping", "kind": "module", "doc": "<p>Sub-module for tone mapping images.</p>\n"}, {"fullname": "everystamp.tonemapping.make_nonnegative", "modulename": "everystamp.tonemapping", "qualname": "make_nonnegative", "kind": "function", "doc": "<p>Makes an array non-negative by adding the minimum entry to all entries.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Array to make non-negative.</p>\n\n<p>Returns:\n    data_scaled : numpy.ndarray\n        Non-negative version of data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.normalise", "modulename": "everystamp.tonemapping", "qualname": "normalise", "kind": "function", "doc": "<p>Normalise an array of values according to y = (x - vmin / (vmax - vmin).</p>\n\n<p>Args:\n    x : numpy.ndarray\n        Array of values to normalise.\n    vmin : float\n        Lower bound for normalisation.\n    vmax : float\n        Upper bound for normalisation.\n    clip : bool\n        Clip values to the range [0:1]?</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">vmin</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">clip</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.gamma", "modulename": "everystamp.tonemapping", "qualname": "gamma", "kind": "function", "doc": "<p>Apply a gamma correction to the image, raising it to the power 1/gamma.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Data which to gamma correct.</p>\n\n<p>Returns:\n    gamma : float\n        The gamma correction factor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">gamma</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr", "modulename": "everystamp.tonemapping.lhdr", "kind": "module", "doc": "<p>Sub-module containing wrappers to LuminosityHDR's HDR tonemapping programs.</p>\n"}, {"fullname": "everystamp.tonemapping.lhdr.BASECOMMAND", "modulename": "everystamp.tonemapping.lhdr", "qualname": "BASECOMMAND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;luminance-hdr-cli&#x27;"}, {"fullname": "everystamp.tonemapping.lhdr.has_luminance_hdr", "modulename": "everystamp.tonemapping.lhdr", "qualname": "has_luminance_hdr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.run_command", "modulename": "everystamp.tonemapping.lhdr", "qualname": "run_command", "kind": "function", "doc": "<p>Run a command through subprocess.</p>\n\n<p>Args:\n    cmd : list\n        List of arguments building up the command or a string of the full command.</p>\n\n<p>Returns:\n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cmd</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.ashikhmin", "modulename": "everystamp.tonemapping.lhdr", "qualname": "ashikhmin", "kind": "function", "doc": "<p>Tonemap the image using the human vision based method described in Ashikmin 2002.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    eq2 : bool\n        Default: True.\n    simple : bool\n        Default: True.\n    local_threshold : float\n        Default: None.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">eq2</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">simple</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">local_threshold</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.drago", "modulename": "everystamp.tonemapping.lhdr", "qualname": "drago", "kind": "function", "doc": "<p>Tonemap the image using gradient domain compression as described in Fattal et al. 2002.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    bias : float\n        Bias the logarithmic base towards lower or higher values. Default: 0.85.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">bias</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.85</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.duran", "modulename": "everystamp.tonemapping.lhdr", "qualname": "duran", "kind": "function", "doc": "<p>Tonemap the image using gradient domain compression as described in Durand and Dorsey et al. 2002.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    sigma_spatial : float\n        Spatial kernal size. Default: None.\n    sigma_range : float\n        Range kernel size. Default: None.\n    base_contrast : float\n        Base contrast. Default: None.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">sigma_spatial</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sigma_range</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">base_contrast</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.fattal", "modulename": "everystamp.tonemapping.lhdr", "qualname": "fattal", "kind": "function", "doc": "<p>Tonemap the image using gradient domain compression as described in Fattal et al. 2002.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    alpha : float\n        Controls which gradient magnitude is preserved when beta is 1. Default is None.\n    beta : float\n        Controls local detail enhancement.\n    colour_saturation : float\n        Controls colour saturation.\n    noise : float\n        Controls the threshold for what is seen as noise, where detail enhancement is reduced.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colour_saturation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">noise</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.ferradans", "modulename": "everystamp.tonemapping.lhdr", "qualname": "ferradans", "kind": "function", "doc": "<p>Tonemap the image using the method described in Ferradans et al. 2011.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    rho : float\n        Controls overall lightness. Larger values yield a brighter image. Default is -2.\n    beta : float\n        Controls detail enhancement. Larger values yield more detail enhancement. Default is 5.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">inv_alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.ferwerda", "modulename": "everystamp.tonemapping.lhdr", "qualname": "ferwerda", "kind": "function", "doc": "<p>Tonemap the image using the method described in Ferwerda et al. 1996.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    multiplier : float\n        Default is None.\n    luminance_adaptation : float\n        Default is None.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">multiplier</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">luminance_adaptation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.kimkautz", "modulename": "everystamp.tonemapping.lhdr", "qualname": "kimkautz", "kind": "function", "doc": "<p>Tonemap the image using the human vision based method described in Kim and Kaus 2008.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    c1 : float\n        Default is None.\n    c2 : float\n        Default is None.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">c1</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">c2</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.lischinski", "modulename": "everystamp.tonemapping.lhdr", "qualname": "lischinski", "kind": "function", "doc": "<p>Tonemap the image using the method described in Lischinski et al. 2006.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    alpha : float\n        Default: None.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.mantiuk06", "modulename": "everystamp.tonemapping.lhdr", "qualname": "mantiuk06", "kind": "function", "doc": "<p>Tonemap the image using the human vision based method described in Mantiuk 2006.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    contrast : float\n        Default is None.\n    saturation : float\n        Default is None.\n    detail : float\n        Default is None.\n    contrast_equalisation : bool\n        Default is False.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">contrast</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">saturation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">detail</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">contrast_equalisation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.mantiuk08", "modulename": "everystamp.tonemapping.lhdr", "qualname": "mantiuk08", "kind": "function", "doc": "<p>Tonemap the image using the human vision based method described in Mantiuk 2008.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    contrast_enhancement : float\n        Default is None.\n    colour_saturation : float\n        Default is None.\n    luminance_level : float\n        Used when set_luminance is True. Default is None.\n    set_luminance : bool\n        Default is False</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">contrast_enhancement</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colour_saturation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">luminance_level</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_luminance</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.reinhard02", "modulename": "everystamp.tonemapping.lhdr", "qualname": "reinhard02", "kind": "function", "doc": "<p>Tonemap the image using the human vision based method described in Mantiuk 2008.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    key : float\n        Default: None.\n    phi : float\n        Default: None.\n    use_scales : bool\n        Default: True.\n    range : float\n        Default: None.\n    low : float\n        Default: None.\n    high : float\n        Default: None.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">phi</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_scales</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"nb\">range</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">low</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">high</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.reinhard05", "modulename": "everystamp.tonemapping.lhdr", "qualname": "reinhard05", "kind": "function", "doc": "<p>Tonemap the image using the human vision based method described in Reinhard 2005.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    brightness : float\n        Default: None.\n    chroma : float\n        Default: None.\n    lightness : float\n        Default: None.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">brightness</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chroma</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lightness</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.pattanaik", "modulename": "everystamp.tonemapping.lhdr", "qualname": "pattanaik", "kind": "function", "doc": "<p>Tonemap the image using the human vision based method described in Pattanaik et al. 2000 and Pattanaik et al. 2002.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    multiplier : float\n        Default: None.\n    local_tonemap : bool\n        Default: True.\n    auto_lum : bool\n        Default: True.\n    cone_level : float\n        Default: None.\n    rod_level : float\n        Default: None.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">multiplier</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">local_tonemap</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">auto_lum</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cone_level</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rod_level</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "everystamp.tonemapping.lhdr.vanhateren", "modulename": "everystamp.tonemapping.lhdr", "qualname": "vanhateren", "kind": "function", "doc": "<p>Tonemap the image using the method described in van Hateren 2006.</p>\n\n<p>Parameters set to None will take their default values as set in LuminanceHDR.</p>\n\n<p>Args:\n    data : numpy.ndarray\n        Input data to tonemap.\n    pupil_area : float\n        Default: None.</p>\n\n<p>Returns:\n    data_tm : numpy.ndarray\n        Tonemapped data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">pupil_area</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();